name: CMake CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # CMake: Linux/Windows -> 3.16.x, macOS -> latest (>=3.5)
      - name: Setup CMake 3.16 (Linux/Windows)
        if: runner.os != 'macOS'
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.16.x'

      - name: Setup CMake (macOS latest)
        if: runner.os == 'macOS'
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: 'latest'

      - name: Show CMake version
        run: cmake --version

      # Linux deps (GLFW/OpenGL/X11, adjust as needed)
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev libgl1-mesa-dev

      # Windows: set MSVC environment and use Ninja to avoid VS 2022 generator issues with CMake 3.16
      - name: MSVC dev env (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Ensure Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja --no-progress

      # Configure
      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF -DGLFW_INSTALL=OFF

      - name: Configure CMake (Windows, Ninja + MSVC)
        if: runner.os == 'Windows'
        run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF -DGLFW_INSTALL=OFF

      # Build
      - name: Build
        run: cmake --build build --parallel

      # Optional: run tests if you have them
      # - name: Test
      #   run: ctest --test-dir build --output-on-failure
