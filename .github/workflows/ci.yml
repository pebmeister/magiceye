name: CMake CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup CMake (all OS)
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.25.x'

      - name: Show tool versions
        run: |
          cmake --version
          python --version || true
          clang --version || true
          gcc --version || true

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev libgl1-mesa-dev ninja-build

      - name: MSVC dev env (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Setup Apple Clang + Ninja (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # Ensure we use Apple's clang toolchain and SDK
          echo "CC=$(xcrun -f clang)" >> $GITHUB_ENV
          echo "CXX=$(xcrun -f clang++)" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          # Set a reasonable deployment target; adjust if you need older support
          echo "MACOSX_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV
          brew install ninja || true

      # Configure (macOS uses Ninja + Apple clang)
      - name: Configure (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_SYSROOT="$SDKROOT" \
            -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSX_DEPLOYMENT_TARGET" \
            -DGLFW_BUILD_EXAMPLES=OFF \
            -DGLFW_BUILD_TESTS=OFF \
            -DGLFW_BUILD_DOCS=OFF \
            -DGLFW_INSTALL=OFF

      # Configure (Linux/Windows keep existing defaults)
      - name: Configure (Linux/Windows)
        if: runner.os != 'macOS'
        shell: bash
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DGLFW_BUILD_EXAMPLES=OFF \
            -DGLFW_BUILD_TESTS=OFF \
            -DGLFW_BUILD_DOCS=OFF \
            -DGLFW_INSTALL=OFF

      # Build
      - name: Build
        run: cmake --build build --parallel
