name: CMake CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Linux/Windows: need >= 3.20 because RapidObj requires it.
      # Choose 3.25.x to also play nice with newer toolchains.
      - name: Setup CMake (Linux/Windows >=3.20)
        if: runner.os != 'macOS'
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.25.x'

      # macOS: use modern CMake but clamp policies so GLM(3.2) doesn't fail.
      - name: Setup CMake (macOS latest)
        if: runner.os == 'macOS'
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: 'latest'

      - name: Show tool versions
        run: |
          cmake --version
          python --version || true

      # Ubuntu deps for GLFW/OpenGL/X11
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev libgl1-mesa-dev ninja-build

      # Windows: MSVC environment + Ninja; force MSVC compilers (avoid MinGW).
      - name: MSVC dev env (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Ensure Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja --no-progress --yes

      # macOS: ensure Ninja in case you want to switch generators later
      - name: Ensure Ninja (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja || true

      # Configure
      - name: Configure (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DGLFW_BUILD_EXAMPLES=OFF \
            -DGLFW_BUILD_TESTS=OFF \
            -DGLFW_BUILD_DOCS=OFF \
            -DGLFW_INSTALL=OFF

      - name: Configure (macOS; clamp policy for GLM 3.2)
        if: runner.os == 'macOS'
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DGLFW_BUILD_EXAMPLES=OFF \
            -DGLFW_BUILD_TESTS=OFF \
            -DGLFW_BUILD_DOCS=OFF \
            -DGLFW_INSTALL=OFF

      - name: Configure (Windows; Ninja + force MSVC compilers)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Force MSVC so CMake doesn't pick Git's MinGW toolchain
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_C_COMPILER=cl `
            -DCMAKE_CXX_COMPILER=cl `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DGLFW_BUILD_EXAMPLES=OFF `
            -DGLFW_BUILD_TESTS=OFF `
            -DGLFW_BUILD_DOCS=OFF `
            -DGLFW_INSTALL=OFF

      # Build
      - name: Build
        run: cmake --build build --parallel

      # Optional: tests
      # - name: Test
      #   run: ctest --test-dir build --output-on-failure
